syntax = "proto2";

import "google/protobuf/descriptor.proto";

package config;

extend google.protobuf.FieldOptions { optional bool secret = 50000; }

message EmailTemplate {
  optional string subject = 1;
  optional string body = 2;
}

enum SmtpEncryption {
  SMTP_ENCRYPTION_UNSPECIFIED = 0;  // Reserved for protobuf default
  SMTP_ENCRYPTION_NONE = 1;
  SMTP_ENCRYPTION_STARTTLS = 2;
  SMTP_ENCRYPTION_TLS = 3;
}

message EmailConfig {
  optional string smtp_host = 1;
  optional uint32 smtp_port = 2;
  optional string smtp_username = 3;
  optional string smtp_password = 4 [ (secret) = true ];
  optional SmtpEncryption smtp_encryption = 5;

  optional string sender_name = 11;
  optional string sender_address = 12;

  optional EmailTemplate user_verification_template = 21;
  optional EmailTemplate password_reset_template = 22;
  optional EmailTemplate change_email_template = 23;
}

enum OAuthProviderId {
  OAUTH_PROVIDER_ID_UNDEFINED = 0;
  TEST = 1;
  OIDC0 = 2;

  DISCORD = 10;
  GITLAB = 11;
  GOOGLE = 12;
  FACEBOOK = 13;
  MICROSOFT = 14;
}

message OAuthProviderConfig {
  optional string client_id = 1;
  optional string client_secret = 2 [ (secret) = true ];

  optional OAuthProviderId provider_id = 3;

  // Settings for generic OpenID Connect provider. Name is implicitly provided
  // via the `AuthConfig.oauth_provders` map key.
  optional string display_name = 11;
  optional string auth_url = 12;
  optional string token_url = 13;
  optional string user_api_url = 14;

  // TODO: Allow turning PKCE on/off. Currently on by default.
  // optional bool pkce = 15;
}

message AuthConfig {
  /// Time-to-live in seconds for auth tokens. Default: 1h.
  optional int64 auth_token_ttl_sec = 1;
  /// Time-to-live in seconds for refresh tokens. Default: 30 days.
  optional int64 refresh_token_ttl_sec = 2;

  /// Disables password-based sign-up. Does not affect already registered users.
  optional bool disable_password_auth = 3;

  /// Minimal password length. Defaults to 8.
  optional uint32 password_minimal_length = 4;

  /// Password must contain lower and upper-case letters.
  optional bool password_must_contain_upper_and_lower_case = 5;

  /// Password must contain digits in addition to alphabetic characters..
  optional bool password_must_contain_digits = 6;

  /// Password must contain special, non-alphanumeric, characters.
  optional bool password_must_contain_special_characters = 7;

  /// Map of configured OAuth providers.
  map<string, OAuthProviderConfig> oauth_providers = 11;

  /// List of custom URI schemes allowed as auth redirects.
  ///
  /// This is useful for mobile apps, desktop or SPAs where an app registers a
  /// custom scheme for calls it wants to handle.
  repeated string custom_uri_schemes = 21;
}

message S3StorageConfig {
  optional string endpoint = 1;
  optional string region = 2;

  optional string bucket_name = 5;

  /// S3 access key, a.k.a. username.
  optional string access_key = 8;
  /// S3 secret access key, a.k.a. password.
  optional string secret_access_key = 9 [ (secret) = true ];
}

message ServerConfig {
  /// Application name presented to users, e.g. when sending emails. Default:
  /// "TrailBase".
  optional string application_name = 1;

  /// Your final, deployed URL. This url is used to build canonical urls
  /// for emails, OAuth redirects, ... . Default: "http://localhost:4000".
  optional string site_url = 2;

  ///  Max age of logs that will be retained during period logs cleanup. Note
  ///  that this implies that some older logs may persist until the cleanup job
  ///  reruns. Default: 7 days.
  optional int64 logs_retention_sec = 11;

  /// If present will use S3 setup over local file-system based storage.
  optional S3StorageConfig s3_storage_config = 13;
}

enum SystemJobId {
  SYSTEM_JOB_ID_UNDEFINED = 0;
  BACKUP = 1;
  HEARTBEAT = 2;
  LOG_CLEANER = 3;
  AUTH_CLEANER = 4;
  QUERY_OPTIMIZER = 5;
  FILE_DELETIONS = 6;
}

message SystemJob {
  /// Identifies the system job by its id.
  optional SystemJobId id = 1;

  /// Cron spec: shorthand or 7-components: (sec, min, hour, day of month, /
  /// month, day of week, year).
  optional string schedule = 2;

  /// Disable the system job.
  optional bool disabled = 3;
}

message JobsConfig {
  /// System jobs overrides.
  ///
  /// NOTE: This is technically a map from id to config, however enums are not
  /// allowed as map keys.
  repeated SystemJob system_jobs = 1;
}

/// Sqlite specific (as opposed to standard SQL) constrained-violation
/// resolution strategy upon insert.
enum ConflictResolutionStrategy {
  CONFLICT_RESOLUTION_STRATEGY_UNDEFINED = 0;
  /// SQL default: Keep transaction open and abort the current statement.
  ABORT = 1;
  /// Abort entire transaction.
  ROLLBACK = 2;
  /// Similar to Abort but doesn't roll back the current statement, i.e. if the
  /// current statement affects multiple rows, changes by that statement prior
  /// to the failure are not rolled back.
  FAIL = 3;
  /// Skip the statement and continue.
  IGNORE = 4;
  /// Replaces the conflicting row in case of a collision (e.g. unique
  /// constraint).
  REPLACE = 5;
}

enum PermissionFlag {
  PERMISSION_FLAG_UNDEFINED = 0;

  // Database record insert.
  CREATE = 1;
  // Database record read/list, i.e. select.
  READ = 2;
  // Database record update.
  UPDATE = 4;
  // Database record delete.
  DELETE = 8;
  /// Lookup JSON schema for the given record api .
  SCHEMA = 16;
}

message RecordApiConfig {
  /// API name, i.e. unique name used to access data via HTTP.
  optional string name = 1;
  /// Referenced table to be exposed.
  optional string table_name = 2;

  /// Strategy to be used on insert if a table constraint is violated.
  optional ConflictResolutionStrategy conflict_resolution = 5;

  /// Fill columns referencing _user(id) automatically from current user's
  /// authentication context if present. Can be useful for static clients, such
  /// as HTML forms, otherwise it's recommended to have the client provide user
  /// ids explicitly and to keep this feature off.
  optional bool autofill_missing_user_id_columns = 6;

  /// Allow subscribing to data changes in realtime using SSE streaming.
  ///
  /// NOTE: If you're using a reverse proxy, this will likely require
  /// configuration changes to allow for server-side streaming HTTP, e.g.
  /// tell the proxy to keep listening and not cache.
  optional bool enable_subscriptions = 9;

  /// Access control lists.
  repeated PermissionFlag acl_world = 7;
  repeated PermissionFlag acl_authenticated = 8;

  /// Columns excluded from this API.
  ///
  /// Excluded columns are completely inaccessible via this API. This is
  /// different from columns with names prefixed by "_", which are considered
  /// hidden. This means they can still be inserted, updated and access checked
  /// unlike excluded columns.
  repeated string excluded_columns = 10;

  /// Access rules to be evaluated on request. Expected to be valid SQL
  /// expression, where `SELECT <expr>` returns a unary boolean.
  ///
  /// The evaluator injects _USER_, _ROW_ and _REQ_ tables that can be
  /// used for validating access, e.g.:
  ///
  ///   _USER_.id = _REQ_.owner
  ///
  /// ensures that the value provided for the `owner` column during an insert
  /// matches the current authenticated user's id. One can also construct
  /// arbitrary validations including sub-queries, e.g.:
  ///
  ///   _USER_.id = _REQ_.owner AND EXISTS(SELECT FROM allowed WHERE
  ///   allowed.user = _USER_.id)
  optional string create_access_rule = 11;
  optional string read_access_rule = 12;
  optional string update_access_rule = 13;
  optional string delete_access_rule = 14;
  optional string schema_access_rule = 15;

  /// A list of foreign key columns that *can* be expanded on read/list, i.e.
  /// the foreign record will be inlined into the response. By default nothing
  /// is expanded.
  ///
  /// Only columns and foreign tables with names not starting with "_", i.e. are
  /// allowed to be expanded.
  repeated string expand = 21;

  /// Hard limit for listing records (default: 1024).
  optional uint64 listing_hard_limit = 22;
}

message JsonSchemaConfig {
  optional string name = 1;
  optional string schema = 2;
}

message Config {
  // NOTE: These top-level fields currently have to be `required` due to the
  // overly simple approach on how we do config merging (from env vars and
  // vault).
  required EmailConfig email = 2;
  required ServerConfig server = 3;
  required AuthConfig auth = 4;
  required JobsConfig jobs = 5;

  repeated RecordApiConfig record_apis = 11;

  repeated JsonSchemaConfig schemas = 21;
}
